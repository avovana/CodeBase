#include <iostream>
#include <chrono>
#include <thread>

using namespace std;
using namespace chrono;

class Timer
{
    using Clock = high_resolution_clock;
    
public:
    Timer(std::chrono::duration<long double> seconds)
        : timeToWait(seconds)
        , startTime(Clock::now())
    { }

    bool isElapsed() const {
        auto timePassed = duration_cast<seconds>(Clock::now() - startTime);
        
        return timePassed >= timeToWait;
    }
  
private:
    duration<long double> timeToWait;
    Clock::time_point startTime;
};

void longComputation() {
    std::this_thread::sleep_for(std::chrono::seconds(1));
}

int main(int, char**)
{
    Timer timer(0.1min);

    for(int i = 0; i < 300; ++i) {
        if(timer.isElapsed()) {
            std::cout << "INFO. Timer elsapsed." << std::endl;
            return 1;
        }
        longComputation();
    }
    
    return 0;
}
